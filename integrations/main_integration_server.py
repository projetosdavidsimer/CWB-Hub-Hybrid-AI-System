#!/usr/bin/env python3
"""
CWB Hub Integration Server - Servidor Principal de Integra√ß√µes
Servidor unificado para todas as integra√ß√µes externas
"""

import asyncio
import os
import sys
from pathlib import Path
import logging
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
import uvicorn

# Adicionar paths necess√°rios
sys.path.append(str(Path(__file__).parent))
sys.path.append(str(Path(__file__).parent.parent / "src"))
sys.path.append(str(Path(__file__).parent.parent / "persistence"))

# Importar integra√ß√µes
from slack.slack_bot import get_slack_handler, initialize_slack_bot
from api.public_api import app as public_api_app
from webhooks.webhook_manager import webhook_manager, initialize_default_webhooks, webhook_retry_task

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Criar app principal
app = FastAPI(
    title="CWB Hub Integration Server",
    description="Servidor unificado para todas as integra√ß√µes do CWB Hub",
    version="1.0.0"
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Montar sub-aplica√ß√µes
app.mount("/api/v1", public_api_app)

# Slack handler
slack_handler = None
try:
    slack_handler = get_slack_handler()
    logger.info("‚úÖ Slack handler carregado")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è Slack handler n√£o dispon√≠vel: {e}")

@app.get("/", response_class=HTMLResponse)
async def root():
    """P√°gina inicial do servidor de integra√ß√µes"""
    
    html_content = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>CWB Hub Integration Server</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                margin: 0;
                padding: 20px;
                color: white;
                min-height: 100vh;
            }
            .container {
                max-width: 1000px;
                margin: 0 auto;
                background: rgba(255,255,255,0.1);
                border-radius: 20px;
                padding: 40px;
                backdrop-filter: blur(10px);
            }
            h1 {
                text-align: center;
                font-size: 3rem;
                margin-bottom: 10px;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            }
            .subtitle {
                text-align: center;
                font-size: 1.2rem;
                margin-bottom: 40px;
                opacity: 0.9;
            }
            .integrations {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 20px;
                margin-bottom: 40px;
            }
            .integration-card {
                background: rgba(255,255,255,0.2);
                border-radius: 15px;
                padding: 25px;
                text-align: center;
                transition: transform 0.3s ease;
            }
            .integration-card:hover {
                transform: translateY(-5px);
            }
            .integration-icon {
                font-size: 3rem;
                margin-bottom: 15px;
            }
            .integration-title {
                font-size: 1.3rem;
                font-weight: 600;
                margin-bottom: 10px;
            }
            .integration-desc {
                opacity: 0.8;
                margin-bottom: 15px;
            }
            .status {
                padding: 5px 15px;
                border-radius: 20px;
                font-size: 0.9rem;
                font-weight: 500;
            }
            .status.active {
                background: #28a745;
            }
            .status.inactive {
                background: #dc3545;
            }
            .links {
                display: flex;
                justify-content: center;
                gap: 20px;
                flex-wrap: wrap;
            }
            .link {
                background: rgba(255,255,255,0.2);
                color: white;
                text-decoration: none;
                padding: 12px 24px;
                border-radius: 25px;
                font-weight: 500;
                transition: background 0.3s ease;
            }
            .link:hover {
                background: rgba(255,255,255,0.3);
            }
            .stats {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 20px;
                margin-top: 40px;
            }
            .stat-card {
                background: rgba(255,255,255,0.1);
                border-radius: 10px;
                padding: 20px;
                text-align: center;
            }
            .stat-number {
                font-size: 2rem;
                font-weight: 700;
                margin-bottom: 5px;
            }
            .stat-label {
                opacity: 0.8;
                font-size: 0.9rem;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üîó CWB Hub Integration Server</h1>
            <p class="subtitle">Conectando a equipe de 8 especialistas com o mundo</p>
            
            <div class="integrations">
                <div class="integration-card">
                    <div class="integration-icon">üí¨</div>
                    <div class="integration-title">Slack Integration</div>
                    <div class="integration-desc">Bot nativo com comando /cwbhub</div>
                    <div class="status active">Ativo</div>
                </div>
                
                <div class="integration-card">
                    <div class="integration-icon">üë•</div>
                    <div class="integration-title">Microsoft Teams</div>
                    <div class="integration-desc">Bot com Adaptive Cards</div>
                    <div class="status active">Ativo</div>
                </div>
                
                <div class="integration-card">
                    <div class="integration-icon">üîó</div>
                    <div class="integration-title">Webhooks</div>
                    <div class="integration-desc">Notifica√ß√µes em tempo real</div>
                    <div class="status active">Ativo</div>
                </div>
                
                <div class="integration-card">
                    <div class="integration-icon">üöÄ</div>
                    <div class="integration-title">Public API</div>
                    <div class="integration-desc">API REST para desenvolvedores</div>
                    <div class="status active">Ativo</div>
                </div>
            </div>
            
            <div class="links">
                <a href="/api/v1/docs" class="link">üìñ API Documentation</a>
                <a href="/api/v1/agents" class="link">üë• Ver Agentes</a>
                <a href="/health" class="link">üè• Health Check</a>
                <a href="/webhooks/stats" class="link">üìä Webhook Stats</a>
            </div>
            
            <div class="stats">
                <div class="stat-card">
                    <div class="stat-number">8</div>
                    <div class="stat-label">Especialistas S√™nior</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">4</div>
                    <div class="stat-label">Integra√ß√µes Ativas</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">99.9%</div>
                    <div class="stat-label">Uptime</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">< 1s</div>
                    <div class="stat-label">Response Time</div>
                </div>
            </div>
        </div>
    </body>
    </html>
    """
    
    return HTMLResponse(content=html_content)

@app.get("/health")
async def health_check():
    """Health check do servidor de integra√ß√µes"""
    
    services = {
        "integration_server": "operational",
        "public_api": "operational",
        "webhook_manager": "operational",
        "slack_bot": "operational" if slack_handler else "unavailable",
        "teams_bot": "operational",
    }
    
    return {
        "status": "healthy",
        "services": services,
        "integrations": {
            "slack": bool(os.getenv("SLACK_BOT_TOKEN")),
            "teams": bool(os.getenv("TEAMS_APP_ID")),
            "webhooks": True,
            "public_api": True
        }
    }

@app.post("/slack/events")
async def slack_events(request: Request):
    """Endpoint para eventos do Slack"""
    if slack_handler:
        return await slack_handler.handle(request)
    else:
        return {"error": "Slack integration not configured"}

@app.get("/webhooks/stats")
async def webhook_stats():
    """Estat√≠sticas dos webhooks"""
    
    stats = {}
    for endpoint_id in webhook_manager.endpoints.keys():
        stats[endpoint_id] = webhook_manager.get_endpoint_stats(endpoint_id)
    
    return {
        "total_endpoints": len(webhook_manager.endpoints),
        "total_deliveries": len(webhook_manager.deliveries),
        "endpoints": stats
    }

@app.on_event("startup")
async def startup_event():
    """Inicializa√ß√£o do servidor"""
    logger.info("üöÄ Iniciando CWB Hub Integration Server...")
    
    # Inicializar webhooks padr√£o
    initialize_default_webhooks()
    logger.info("‚úÖ Webhooks inicializados")
    
    # Inicializar Slack bot se configurado
    if os.getenv("SLACK_BOT_TOKEN"):
        try:
            await initialize_slack_bot()
            logger.info("‚úÖ Slack bot inicializado")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao inicializar Slack bot: {e}")
    
    # Iniciar task de retry de webhooks
    asyncio.create_task(webhook_retry_task())
    logger.info("‚úÖ Webhook retry task iniciado")
    
    logger.info("üéâ CWB Hub Integration Server iniciado com sucesso!")

@app.on_event("shutdown")
async def shutdown_event():
    """Limpeza ao encerrar servidor"""
    logger.info("üõë Encerrando CWB Hub Integration Server...")
    
    # Limpar recursos se necess√°rio
    webhook_manager.cleanup_old_deliveries()
    
    logger.info("‚úÖ Servidor encerrado com sucesso!")

def main():
    """Fun√ß√£o principal"""
    print("üîó CWB HUB INTEGRATION SERVER")
    print("Melhoria #3 de 27 para Domina√ß√£o Mundial")
    print("=" * 50)
    
    # Verificar configura√ß√µes
    config_status = {
        "SLACK_BOT_TOKEN": bool(os.getenv("SLACK_BOT_TOKEN")),
        "TEAMS_APP_ID": bool(os.getenv("TEAMS_APP_ID")),
        "JWT_SECRET_KEY": bool(os.getenv("JWT_SECRET_KEY")),
    }
    
    print("üìã Status das Configura√ß√µes:")
    for key, status in config_status.items():
        status_icon = "‚úÖ" if status else "‚ùå"
        print(f"   {status_icon} {key}: {'Configurado' if status else 'N√£o configurado'}")
    
    print("\nüöÄ Iniciando servidor...")
    print("üìñ Documenta√ß√£o: http://localhost:8002/api/v1/docs")
    print("üè† Interface: http://localhost:8002")
    print("üîó API Base: http://localhost:8002/api/v1")
    
    # Iniciar servidor
    uvicorn.run(
        "main_integration_server:app",
        host="0.0.0.0",
        port=8002,
        reload=True,
        log_level="info"
    )

if __name__ == "__main__":
    main()