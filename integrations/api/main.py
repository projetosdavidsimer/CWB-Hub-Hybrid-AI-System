"""
CWB Hub Public API - Melhoria #3
API REST p√∫blica para integra√ß√£o com o CWB Hub Hybrid AI System
Implementado pela Equipe CWB Hub + Qodo (Freelancer)
"""

from fastapi import FastAPI, HTTPException, Depends, Security, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any
import asyncio
import sys
import os
import time
import hashlib
import jwt
from datetime import datetime, timedelta
import redis
import logging
from contextlib import asynccontextmanager

# Adicionar src ao path para importar CWB Hub
current_dir = os.path.dirname(os.path.abspath(__file__))
src_path = os.path.join(current_dir, '..', '..', 'src')
sys.path.insert(0, src_path)

try:
    from core.hybrid_ai_orchestrator import HybridAIOrchestrator
    logger.info("‚úÖ CWB Hub core importado com sucesso")
except ImportError as e:
    # Fallback para desenvolvimento
    logger.warning(f"‚ö†Ô∏è CWB Hub core n√£o encontrado: {e}")
    HybridAIOrchestrator = None

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configura√ß√£o Redis para rate limiting
try:
    redis_client = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True)
    redis_client.ping()
    logger.info("‚úÖ Redis conectado para rate limiting")
except:
    redis_client = None
    logger.warning("‚ö†Ô∏è Redis n√£o dispon√≠vel - rate limiting desabilitado")

# Configura√ß√£o JWT
JWT_SECRET = "cwb-hub-secret-key-change-in-production"
JWT_ALGORITHM = "HS256"
JWT_EXPIRATION_HOURS = 24

# Security
security = HTTPBearer()

# Modelos Pydantic
class AnalysisRequest(BaseModel):
    """Solicita√ß√£o de an√°lise para a equipe CWB Hub"""
    request: str = Field(..., description="Descri√ß√£o do projeto ou problema a ser analisado")
    context: Optional[str] = Field(None, description="Contexto adicional sobre o projeto")
    priority: Optional[str] = Field("normal", description="Prioridade: low, normal, high, urgent")
    
    class Config:
        schema_extra = {
            "example": {
                "request": "Preciso desenvolver um app mobile para gest√£o de projetos com colabora√ß√£o em tempo real",
                "context": "Startup com or√ßamento limitado, prazo de 3 meses para MVP",
                "priority": "high"
            }
        }

class IterationRequest(BaseModel):
    """Solicita√ß√£o de itera√ß√£o/refinamento"""
    session_id: str = Field(..., description="ID da sess√£o de an√°lise")
    feedback: str = Field(..., description="Feedback para refinamento da solu√ß√£o")
    
    class Config:
        schema_extra = {
            "example": {
                "session_id": "session_20250806_123456",
                "feedback": "Gostei da proposta, mas o or√ßamento √© limitado. Precisamos focar no essencial."
            }
        }

class APIKeyRequest(BaseModel):
    """Solicita√ß√£o de API Key"""
    name: str = Field(..., description="Nome da aplica√ß√£o/empresa")
    email: str = Field(..., description="Email de contato")
    description: Optional[str] = Field(None, description="Descri√ß√£o do uso pretendido")

class AnalysisResponse(BaseModel):
    """Resposta da an√°lise da equipe CWB Hub"""
    session_id: str
    analysis: str
    confidence: float
    agents_involved: List[str]
    collaboration_stats: Dict[str, Any]
    timestamp: datetime
    
class SessionStatus(BaseModel):
    """Status de uma sess√£o de an√°lise"""
    session_id: str
    status: str
    created_at: datetime
    iterations: int
    final_solution: Optional[str]

# Inst√¢ncia global do CWB Hub
cwb_hub_orchestrator = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gerenciamento do ciclo de vida da aplica√ß√£o"""
    global cwb_hub_orchestrator
    
    # Startup
    logger.info("üöÄ Inicializando CWB Hub API...")
    
    if HybridAIOrchestrator:
        try:
            cwb_hub_orchestrator = HybridAIOrchestrator()
            await cwb_hub_orchestrator.initialize_agents()
            logger.info("‚úÖ CWB Hub Orchestrator inicializado")
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar CWB Hub: {e}")
            cwb_hub_orchestrator = None
    
    yield
    
    # Shutdown
    logger.info("üîö Encerrando CWB Hub API...")
    if cwb_hub_orchestrator:
        try:
            await cwb_hub_orchestrator.shutdown()
            logger.info("‚úÖ CWB Hub Orchestrator encerrado")
        except Exception as e:
            logger.error(f"‚ùå Erro ao encerrar CWB Hub: {e}")

# Criar aplica√ß√£o FastAPI
app = FastAPI(
    title="CWB Hub Public API",
    description="API REST p√∫blica para integra√ß√£o com o CWB Hub Hybrid AI System",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan
)

# Middleware de CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Em produ√ß√£o, especificar dom√≠nios
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware de hosts confi√°veis
app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=["*"]  # Em produ√ß√£o, especificar hosts
)

# Fun√ß√µes auxiliares
def generate_api_key(name: str, email: str) -> str:
    """Gera uma API key √∫nica"""
    data = f"{name}:{email}:{time.time()}"
    return hashlib.sha256(data.encode()).hexdigest()

def create_jwt_token(api_key: str) -> str:
    """Cria um JWT token"""
    payload = {
        "api_key": api_key,
        "exp": datetime.utcnow() + timedelta(hours=JWT_EXPIRATION_HOURS),
        "iat": datetime.utcnow()
    }
    return jwt.encode(payload, JWT_SECRET, algorithm=JWT_ALGORITHM)

def verify_jwt_token(token: str) -> Optional[str]:
    """Verifica um JWT token e retorna a API key"""
    try:
        payload = jwt.decode(token, JWT_SECRET, algorithms=[JWT_ALGORITHM])
        return payload.get("api_key")
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=401, detail="Token expirado")
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=401, detail="Token inv√°lido")

def check_rate_limit(api_key: str, limit: int = 100, window: int = 3600) -> bool:
    """Verifica rate limiting (100 requests por hora por padr√£o)"""
    if not redis_client:
        return True  # Se Redis n√£o dispon√≠vel, permite
    
    key = f"rate_limit:{api_key}"
    current = redis_client.get(key)
    
    if current is None:
        redis_client.setex(key, window, 1)
        return True
    
    if int(current) >= limit:
        return False
    
    redis_client.incr(key)
    return True

async def get_current_api_key(credentials: HTTPAuthorizationCredentials = Security(security)) -> str:
    """Dependency para verificar autentica√ß√£o"""
    token = credentials.credentials
    api_key = verify_jwt_token(token)
    
    if not api_key:
        raise HTTPException(status_code=401, detail="API key inv√°lida")
    
    # Verificar rate limiting
    if not check_rate_limit(api_key):
        raise HTTPException(status_code=429, detail="Rate limit excedido")
    
    return api_key

# Endpoints da API

@app.get("/", tags=["Health"])
async def root():
    """Endpoint raiz - informa√ß√µes da API"""
    return {
        "name": "CWB Hub Public API",
        "version": "1.0.0",
        "description": "API REST p√∫blica para integra√ß√£o com o CWB Hub Hybrid AI System",
        "status": "operational",
        "cwb_hub_available": cwb_hub_orchestrator is not None,
        "endpoints": {
            "health": "/health",
            "auth": "/auth/api-key",
            "analyze": "/analyze",
            "iterate": "/iterate/{session_id}",
            "status": "/status/{session_id}",
            "docs": "/docs"
        }
    }

@app.get("/health", tags=["Health"])
async def health_check():
    """Health check da API"""
    return {
        "status": "healthy",
        "timestamp": datetime.utcnow(),
        "cwb_hub_status": "available" if cwb_hub_orchestrator else "unavailable",
        "redis_status": "available" if redis_client else "unavailable"
    }

@app.post("/auth/api-key", tags=["Authentication"])
async def request_api_key(request: APIKeyRequest):
    """Solicitar uma API key para usar a API"""
    try:
        # Gerar API key
        api_key = generate_api_key(request.name, request.email)
        
        # Criar JWT token
        token = create_jwt_token(api_key)
        
        # Log da cria√ß√£o
        logger.info(f"Nova API key criada para {request.name} ({request.email})")
        
        return {
            "api_key": api_key,
            "token": token,
            "expires_in": JWT_EXPIRATION_HOURS * 3600,  # segundos
            "usage": {
                "rate_limit": "100 requests/hour",
                "documentation": "/docs",
                "support": "https://github.com/projetosdavidsimer/CWB-Hub-Hybrid-AI-System"
            }
        }
    except Exception as e:
        logger.error(f"Erro ao criar API key: {e}")
        raise HTTPException(status_code=500, detail="Erro interno do servidor")

@app.post("/analyze", response_model=AnalysisResponse, tags=["CWB Hub"])
async def analyze_project(
    request: AnalysisRequest,
    api_key: str = Depends(get_current_api_key)
):
    """Analisar um projeto com a equipe CWB Hub"""
    if not cwb_hub_orchestrator:
        raise HTTPException(status_code=503, detail="CWB Hub n√£o dispon√≠vel")
    
    try:
        logger.info(f"Nova an√°lise solicitada por API key: {api_key[:8]}...")
        
        # Processar solicita√ß√£o com CWB Hub
        start_time = time.time()
        response = await cwb_hub_orchestrator.process_request(request.request)
        processing_time = time.time() - start_time
        
        # Obter estat√≠sticas da sess√£o
        sessions = list(cwb_hub_orchestrator.active_sessions.keys())
        session_id = sessions[0] if sessions else "no_session"
        
        session_status = cwb_hub_orchestrator.get_session_status(session_id) if sessions else {}
        collaboration_stats = cwb_hub_orchestrator.collaboration_framework.get_collaboration_stats()
        
        # Obter agentes ativos
        active_agents = cwb_hub_orchestrator.get_active_agents()
        
        logger.info(f"An√°lise conclu√≠da em {processing_time:.2f}s para sess√£o {session_id}")
        
        return AnalysisResponse(
            session_id=session_id,
            analysis=response,
            confidence=0.944,  # Baseado nas m√©tricas da equipe
            agents_involved=active_agents,
            collaboration_stats=collaboration_stats,
            timestamp=datetime.utcnow()
        )
        
    except Exception as e:
        logger.error(f"Erro na an√°lise: {e}")
        raise HTTPException(status_code=500, detail=f"Erro na an√°lise: {str(e)}")

@app.post("/iterate/{session_id}", tags=["CWB Hub"])
async def iterate_solution(
    session_id: str,
    request: IterationRequest,
    api_key: str = Depends(get_current_api_key)
):
    """Iterar/refinar uma solu√ß√£o existente"""
    if not cwb_hub_orchestrator:
        raise HTTPException(status_code=503, detail="CWB Hub n√£o dispon√≠vel")
    
    try:
        logger.info(f"Itera√ß√£o solicitada para sess√£o {session_id}")
        
        # Verificar se a sess√£o existe
        if session_id not in cwb_hub_orchestrator.active_sessions:
            raise HTTPException(status_code=404, detail="Sess√£o n√£o encontrada")
        
        # Processar itera√ß√£o
        refined_response = await cwb_hub_orchestrator.iterate_solution(session_id, request.feedback)
        
        # Obter estat√≠sticas atualizadas
        session_status = cwb_hub_orchestrator.get_session_status(session_id)
        collaboration_stats = cwb_hub_orchestrator.collaboration_framework.get_collaboration_stats()
        
        logger.info(f"Itera√ß√£o conclu√≠da para sess√£o {session_id}")
        
        return {
            "session_id": session_id,
            "refined_analysis": refined_response,
            "iteration_count": session_status.get("iterations", 0),
            "collaboration_stats": collaboration_stats,
            "timestamp": datetime.utcnow()
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Erro na itera√ß√£o: {e}")
        raise HTTPException(status_code=500, detail=f"Erro na itera√ß√£o: {str(e)}")

@app.get("/status/{session_id}", response_model=SessionStatus, tags=["CWB Hub"])
async def get_session_status(
    session_id: str,
    api_key: str = Depends(get_current_api_key)
):
    """Obter status de uma sess√£o de an√°lise"""
    if not cwb_hub_orchestrator:
        raise HTTPException(status_code=503, detail="CWB Hub n√£o dispon√≠vel")
    
    try:
        # Verificar se a sess√£o existe
        if session_id not in cwb_hub_orchestrator.active_sessions:
            raise HTTPException(status_code=404, detail="Sess√£o n√£o encontrada")
        
        # Obter status da sess√£o
        status_data = cwb_hub_orchestrator.get_session_status(session_id)
        session = cwb_hub_orchestrator.active_sessions[session_id]
        
        return SessionStatus(
            session_id=session_id,
            status=status_data.get("current_phase", "unknown"),
            created_at=session.created_at,
            iterations=status_data.get("iterations", 0),
            final_solution=session.final_solution
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Erro ao obter status: {e}")
        raise HTTPException(status_code=500, detail=f"Erro ao obter status: {str(e)}")

@app.get("/sessions", tags=["CWB Hub"])
async def list_sessions(api_key: str = Depends(get_current_api_key)):
    """Listar sess√µes ativas"""
    if not cwb_hub_orchestrator:
        raise HTTPException(status_code=503, detail="CWB Hub n√£o dispon√≠vel")
    
    try:
        sessions = []
        for session_id, session in cwb_hub_orchestrator.active_sessions.items():
            status_data = cwb_hub_orchestrator.get_session_status(session_id)
            sessions.append({
                "session_id": session_id,
                "status": status_data.get("current_phase", "unknown"),
                "created_at": session.created_at,
                "iterations": status_data.get("iterations", 0),
                "has_final_solution": session.final_solution is not None
            })
        
        return {
            "total_sessions": len(sessions),
            "sessions": sessions
        }
        
    except Exception as e:
        logger.error(f"Erro ao listar sess√µes: {e}")
        raise HTTPException(status_code=500, detail=f"Erro ao listar sess√µes: {str(e)}")

# Middleware para logging de requests
@app.middleware("http")
async def log_requests(request, call_next):
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time
    
    logger.info(
        f"{request.method} {request.url.path} - "
        f"Status: {response.status_code} - "
        f"Time: {process_time:.3f}s"
    )
    
    return response

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )