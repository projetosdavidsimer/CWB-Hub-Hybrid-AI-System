#!/usr/bin/env python3
"""
Demo do Sistema de Relat√≥rios Automatizados CWB Hub
Criado pela Equipe H√≠brida CWB Hub

Demonstra todas as funcionalidades do sistema de relat√≥rios:
- Gera√ß√£o de relat√≥rios
- Templates customizados
- Dashboard em tempo real
- Sistema de agendamento
- Distribui√ß√£o por email
"""

import asyncio
import logging
from pathlib import Path
import sys

# Adicionar paths
sys.path.append(str(Path(__file__).parent))
sys.path.append(str(Path(__file__).parent / "src"))

from reporting.core.report_engine import ReportEngine
from reporting.core.data_collector import DataCollector
from reporting.core.template_engine import TemplateEngine
from reporting.core.scheduler import ReportScheduler
from reporting.models.report_models import ReportType, ReportFormat, ReportFrequency
from reporting.config.report_configs import get_config

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def demo_data_collection():
    """Demonstra coleta de dados"""
    print("\n" + "="*80)
    print("üîç DEMONSTRA√á√ÉO: COLETA DE DADOS")
    print("="*80)
    
    collector = DataCollector()
    
    print("üìä Coletando m√©tricas do sistema...")
    metrics = await collector.collect_all_metrics()
    
    print("‚úÖ Dados coletados com sucesso!")
    print(f"üìà Se√ß√µes de dados: {list(metrics.keys())}")
    
    # Mostrar algumas m√©tricas interessantes
    session_metrics = metrics.get("session_metrics", {})
    agent_metrics = metrics.get("agent_metrics", {})
    
    print(f"\nüìã Resumo das M√©tricas:")
    print(f"  ‚Ä¢ Sess√µes ativas: {session_metrics.get('active_sessions', 0)}")
    print(f"  ‚Ä¢ Agentes ativos: {agent_metrics.get('total_active_agents', 0)}")
    print(f"  ‚Ä¢ Taxa de sucesso: {session_metrics.get('success_rate_percent', 0):.1f}%")
    
    return metrics


async def demo_template_engine():
    """Demonstra engine de templates"""
    print("\n" + "="*80)
    print("üé® DEMONSTRA√á√ÉO: ENGINE DE TEMPLATES")
    print("="*80)
    
    template_engine = TemplateEngine()
    
    # Dados de exemplo
    sample_data = {
        "session_metrics": {
            "active_sessions": 12,
            "total_sessions_period": 150,
            "success_rate_percent": 94.5
        },
        "agent_metrics": {
            "total_active_agents": 8,
            "avg_participation_rate": 92.3
        },
        "collaboration_metrics": {
            "collaboration_quality_score": 8.9
        }
    }
    
    print("üñºÔ∏è Renderizando template de relat√≥rio executivo...")
    html_content = template_engine.render_template("executive_summary.html", sample_data)
    
    # Salvar exemplo
    output_file = Path("demo_executive_report.html")
    output_file.write_text(html_content, encoding='utf-8')
    
    print(f"‚úÖ Template renderizado e salvo em: {output_file.absolute()}")
    print(f"üìÑ Tamanho do HTML: {len(html_content)} caracteres")


async def demo_report_generation():
    """Demonstra gera√ß√£o de relat√≥rios"""
    print("\n" + "="*80)
    print("üìä DEMONSTRA√á√ÉO: GERA√á√ÉO DE RELAT√ìRIOS")
    print("="*80)
    
    report_engine = ReportEngine()
    
    # Gerar diferentes tipos de relat√≥rios
    report_types = [
        ReportType.EXECUTIVE_SUMMARY,
        ReportType.AGENT_PERFORMANCE,
        ReportType.COLLABORATION_STATS
    ]
    
    for report_type in report_types:
        print(f"\nüìà Gerando relat√≥rio: {report_type.value}")
        
        try:
            result = await report_engine.generate_report(
                report_type=report_type,
                output_formats=[ReportFormat.HTML]
            )
            
            if result.status.value == "completed":
                print(f"  ‚úÖ Sucesso! Tempo: {result.duration_seconds:.2f}s")
                print(f"  üìÅ Arquivos: {len(result.output_files)}")
                for file_path in result.output_files:
                    print(f"    ‚Ä¢ {file_path}")
            else:
                print(f"  ‚ùå Falha: {result.error_message}")
                
        except Exception as e:
            print(f"  ‚ùå Erro: {e}")


async def demo_dashboard():
    """Demonstra dashboard em tempo real"""
    print("\n" + "="*80)
    print("üìä DEMONSTRA√á√ÉO: DASHBOARD EM TEMPO REAL")
    print("="*80)
    
    report_engine = ReportEngine()
    
    print("üîÑ Gerando dashboard...")
    dashboard_html = await report_engine.generate_dashboard_report()
    
    # Salvar dashboard
    dashboard_file = Path("demo_dashboard.html")
    dashboard_file.write_text(dashboard_html, encoding='utf-8')
    
    print(f"‚úÖ Dashboard gerado: {dashboard_file.absolute()}")
    print(f"üìä Tamanho: {len(dashboard_html)} caracteres")
    
    # Tentar abrir no navegador
    try:
        import webbrowser
        webbrowser.open(f"file://{dashboard_file.absolute()}")
        print("üåê Dashboard aberto no navegador!")
    except:
        print("üí° Abra manualmente o arquivo dashboard.html no navegador")


async def demo_scheduler():
    """Demonstra sistema de agendamento"""
    print("\n" + "="*80)
    print("‚è∞ DEMONSTRA√á√ÉO: SISTEMA DE AGENDAMENTO")
    print("="*80)
    
    report_engine = ReportEngine()
    scheduler = ReportScheduler(report_engine)
    
    try:
        print("üöÄ Iniciando scheduler...")
        await scheduler.start()
        
        # Configurar agendamentos de demonstra√ß√£o
        schedules = [
            {
                "schedule_id": "demo_daily_executive",
                "report_type": ReportType.EXECUTIVE_SUMMARY,
                "frequency": ReportFrequency.DAILY,
                "output_formats": [ReportFormat.HTML]
            },
            {
                "schedule_id": "demo_weekly_agents",
                "report_type": ReportType.AGENT_PERFORMANCE,
                "frequency": ReportFrequency.WEEKLY,
                "output_formats": [ReportFormat.HTML]
            }
        ]
        
        print("\nüìÖ Configurando agendamentos de demonstra√ß√£o...")
        for schedule_config in schedules:
            success = await scheduler.schedule_report(**schedule_config)
            status = "‚úÖ Sucesso" if success else "‚ùå Falha"
            print(f"  {status}: {schedule_config['schedule_id']}")
        
        # Listar agendamentos
        print("\nüìã Agendamentos configurados:")
        active_schedules = scheduler.list_schedules()
        
        for schedule in active_schedules:
            print(f"  üîπ {schedule['schedule_id']}")
            print(f"    Tipo: {schedule['report_type']}")
            print(f"    Frequ√™ncia: {schedule['frequency']}")
            print(f"    Pr√≥xima execu√ß√£o: {schedule.get('next_run', 'N/A')}")
        
        # Status do scheduler
        status = scheduler.get_scheduler_status()
        print(f"\nüìä Status do Scheduler:")
        print(f"  ‚Ä¢ Executando: {'Sim' if status['running'] else 'N√£o'}")
        print(f"  ‚Ä¢ Total de jobs: {status['total_jobs']}")
        print(f"  ‚Ä¢ Agendamentos ativos: {status['active_schedules']}")
        
    finally:
        print("\nüõë Parando scheduler...")
        await scheduler.stop()


async def demo_configuration():
    """Demonstra sistema de configura√ß√£o"""
    print("\n" + "="*80)
    print("‚öôÔ∏è DEMONSTRA√á√ÉO: SISTEMA DE CONFIGURA√á√ÉO")
    print("="*80)
    
    config = get_config()
    
    print("üìã Configura√ß√µes do Sistema:")
    print(f"  ‚Ä¢ Diret√≥rio de sa√≠da: {config.REPORTS_OUTPUT_DIR}")
    print(f"  ‚Ä¢ Diret√≥rio de templates: {config.TEMPLATES_DIR}")
    print(f"  ‚Ä¢ Cache habilitado: {config.CACHE_CONFIG['enabled']}")
    print(f"  ‚Ä¢ Alertas habilitados: {config.ALERT_CONFIG['enabled']}")
    
    # Validar configura√ß√µes
    print("\nüîç Validando configura√ß√µes...")
    validation = config.validate_config()
    
    for component, is_valid in validation.items():
        status = "‚úÖ OK" if is_valid else "‚ùå Erro"
        print(f"  {status}: {component}")
    
    # Criar diret√≥rios necess√°rios
    print("\nüìÅ Criando diret√≥rios necess√°rios...")
    config.create_directories()
    print("‚úÖ Diret√≥rios criados com sucesso!")
    
    # Informa√ß√µes do ambiente
    env_info = config.get_environment_info()
    print(f"\nüåç Informa√ß√µes do Ambiente:")
    for key, value in env_info.items():
        print(f"  ‚Ä¢ {key}: {value}")


async def demo_complete_workflow():
    """Demonstra fluxo completo do sistema"""
    print("\n" + "="*80)
    print("üöÄ DEMONSTRA√á√ÉO: FLUXO COMPLETO")
    print("="*80)
    
    print("1Ô∏è‚É£ Inicializando sistema completo...")
    
    # Inicializar componentes
    data_collector = DataCollector()
    template_engine = TemplateEngine()
    report_engine = ReportEngine(data_collector, template_engine)
    
    print("2Ô∏è‚É£ Coletando dados em tempo real...")
    metrics = await data_collector.collect_all_metrics()
    
    print("3Ô∏è‚É£ Gerando relat√≥rio executivo completo...")
    result = await report_engine.generate_report(
        report_type=ReportType.EXECUTIVE_SUMMARY,
        output_formats=[ReportFormat.HTML, ReportFormat.JSON]
    )
    
    if result.status.value == "completed":
        print("‚úÖ Relat√≥rio completo gerado com sucesso!")
        print(f"‚è±Ô∏è Tempo total: {result.duration_seconds:.2f} segundos")
        print("üìÅ Arquivos gerados:")
        for file_path in result.output_files:
            print(f"  ‚Ä¢ {file_path}")
    
    print("4Ô∏è‚É£ Gerando dashboard final...")
    dashboard_html = await report_engine.generate_dashboard_report()
    
    final_dashboard = Path("demo_final_dashboard.html")
    final_dashboard.write_text(dashboard_html, encoding='utf-8')
    
    print(f"‚úÖ Dashboard final: {final_dashboard.absolute()}")
    
    print("\nüéâ DEMONSTRA√á√ÉO COMPLETA!")
    print("="*80)
    print("üìä Sistema de Relat√≥rios CWB Hub totalmente funcional!")
    print("üîß Recursos demonstrados:")
    print("  ‚úÖ Coleta autom√°tica de dados")
    print("  ‚úÖ Templates customiz√°veis")
    print("  ‚úÖ Gera√ß√£o de m√∫ltiplos formatos")
    print("  ‚úÖ Dashboard em tempo real")
    print("  ‚úÖ Sistema de agendamento")
    print("  ‚úÖ Configura√ß√£o flex√≠vel")
    print("\nüí° Use a CLI para interagir com o sistema:")
    print("   python cwb_cli.py report-generate executive_summary")
    print("   python cwb_cli.py dashboard --open")
    print("   python cwb_cli.py report-schedule list")


async def main():
    """Fun√ß√£o principal da demonstra√ß√£o"""
    print("üéØ SISTEMA DE RELAT√ìRIOS AUTOMATIZADOS CWB HUB")
    print("Criado pela Equipe H√≠brida CWB Hub")
    print("="*80)
    
    try:
        # Executar todas as demonstra√ß√µes
        await demo_configuration()
        await demo_data_collection()
        await demo_template_engine()
        await demo_report_generation()
        await demo_dashboard()
        await demo_scheduler()
        await demo_complete_workflow()
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Demonstra√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro durante demonstra√ß√£o: {e}")
        logger.exception("Erro na demonstra√ß√£o")


if __name__ == "__main__":
    # Configurar encoding para Windows
    if sys.platform == "win32":
        import io
        sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
        sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')
    
    asyncio.run(main())