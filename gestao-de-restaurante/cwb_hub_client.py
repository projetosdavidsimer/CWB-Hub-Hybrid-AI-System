#!/usr/bin/env python3
"""
Cliente CWB Hub para Projeto de Gest√£o de Restaurante
Criado por: David Simer

Este arquivo resolve os problemas de importa√ß√£o e demonstra como usar
o CWB Hub Hybrid AI System no seu projeto.
"""

import asyncio
import sys
import os
from pathlib import Path

def setup_cwb_hub_path():
    """Configura o caminho para importar o CWB Hub"""
    # Encontrar o diret√≥rio do CWB Hub
    current_file = Path(__file__).resolve()
    project_root = current_file.parent.parent  # Volta para 'Homem da Casa'
    src_path = project_root / 'src'
    
    if src_path.exists():
        sys.path.insert(0, str(src_path))
        return True
    else:
        print(f"‚ùå Diret√≥rio src n√£o encontrado em: {src_path}")
        return False

# Configurar caminho antes de importar
if setup_cwb_hub_path():
    try:
        # Importar m√≥dulos do CWB Hub
        from core.hybrid_ai_orchestrator import HybridAIOrchestrator
        CWB_HUB_AVAILABLE = True
    except ImportError as e:
        print(f"‚ùå Erro ao importar CWB Hub: {e}")
        CWB_HUB_AVAILABLE = False
else:
    CWB_HUB_AVAILABLE = False

class RestaurantProjectManager:
    """Gerenciador do projeto de restaurante usando CWB Hub"""
    
    def __init__(self):
        if not CWB_HUB_AVAILABLE:
            raise RuntimeError("CWB Hub n√£o est√° dispon√≠vel")
        
        self.orchestrator = HybridAIOrchestrator()
        self.project_name = "Sistema de Gest√£o de Restaurante"
        self.creator = "David Simer"
        
    async def initialize_team(self):
        """Inicializa a equipe CWB Hub"""
        print("üè¢ CWB HUB HYBRID AI SYSTEM")
        print(f"üë®‚Äçüíª Criado por: {self.creator}")
        print(f"üìã Projeto: {self.project_name}")
        print("=" * 60)
        
        print("üöÄ Inicializando Equipe CWB Hub...")
        await self.orchestrator.initialize_agents()
        
        agents = self.orchestrator.get_active_agents()
        print(f"‚úÖ Equipe inicializada com {len(agents)} profissionais:")
        
        for agent_id in agents:
            agent = self.orchestrator.agents[agent_id]
            print(f"   üë§ {agent.profile.name} - {agent.profile.role}")
        
        print("=" * 60)
        return True
    
    async def analyze_business_plan(self, business_plan):
        """Analisa o plano de neg√≥cio com a equipe CWB Hub"""
        print("\nüéØ ANALISANDO PLANO DE NEG√ìCIO")
        print("=" * 60)
        
        # Criar solicita√ß√£o estruturada para a equipe
        request = f"""
        PROJETO: {self.project_name}
        CRIADO POR: {self.creator}
        
        PLANO DE NEG√ìCIO:
        {business_plan}
        
        SOLICITA√á√ÉO PARA A EQUIPE CWB HUB:
        
        Preciso que voc√™s analisem este plano de neg√≥cio e forne√ßam:
        
        1. AN√ÅLISE ESTRAT√âGICA (Ana - CTO):
           - Viabilidade t√©cnica e comercial
           - Roadmap de desenvolvimento
           - An√°lise de riscos e oportunidades
        
        2. ARQUITETURA T√âCNICA (Carlos - Arquiteto):
           - Estrutura do sistema
           - Banco de dados recomendado
           - APIs e integra√ß√µes necess√°rias
           - Escalabilidade e performance
        
        3. PLANO DE DESENVOLVIMENTO (Sofia - Full Stack):
           - Tecnologias recomendadas
           - Estrutura do c√≥digo
           - Cronograma de implementa√ß√£o
           - Estimativas de esfor√ßo
        
        4. APP MOBILE (Gabriel - Mobile):
           - Especifica√ß√µes do app para gar√ßons
           - Tecnologia mobile recomendada
           - Funcionalidades offline
           - Integra√ß√£o com sistema principal
        
        5. DESIGN E UX (Isabella - UX/UI):
           - Wireframes conceituais
           - Experi√™ncia do usu√°rio
           - Interface intuitiva para equipe n√£o t√©cnica
           - Design responsivo
        
        6. QUALIDADE E TESTES (Lucas - QA):
           - Estrat√©gia de testes
           - Automa√ß√£o de testes
           - Controle de qualidade
           - Testes de usabilidade
        
        7. INFRAESTRUTURA (Mariana - DevOps):
           - Hospedagem e deploy
           - Backup e seguran√ßa
           - Monitoramento
           - Escalabilidade
        
        8. GEST√ÉO DO PROJETO (Pedro - PM):
           - Cronograma detalhado
           - Marcos e entregas
           - Gest√£o de recursos
           - Comunica√ß√£o com stakeholders
        
        COLABOREM entre voc√™s para criar uma solu√ß√£o integrada e coesa!
        """
        
        print("üì§ Enviando para an√°lise da equipe...")
        response = await self.orchestrator.process_request(request.strip())
        
        print("\nüì• AN√ÅLISE COMPLETA DA EQUIPE CWB HUB:")
        print("=" * 60)
        print(response)
        
        return response
    
    async def refine_solution(self, feedback):
        """Refina a solu√ß√£o com base no feedback"""
        print("\nüîÑ REFINANDO SOLU√á√ÉO COM FEEDBACK")
        print("=" * 60)
        print(f"üí¨ Feedback recebido:")
        print(feedback)
        print()
        
        # Obter sess√£o ativa
        sessions = list(self.orchestrator.active_sessions.keys())
        if sessions:
            session_id = sessions[0]
            print(f"üîÑ Iterando solu√ß√£o (Sess√£o: {session_id})...")
            
            refined_response = await self.orchestrator.iterate_solution(session_id, feedback)
            
            print("\nüì• SOLU√á√ÉO REFINADA:")
            print("=" * 60)
            print(refined_response)
            
            return refined_response
        else:
            print("‚ùå Nenhuma sess√£o ativa encontrada")
            return None
    
    async def get_project_status(self):
        """Obt√©m status do projeto"""
        print("\nüìä STATUS DO PROJETO:")
        print("=" * 60)
        
        sessions = list(self.orchestrator.active_sessions.keys())
        if sessions:
            session_id = sessions[0]
            status = self.orchestrator.get_session_status(session_id)
            stats = self.orchestrator.collaboration_framework.get_collaboration_stats()
            
            print(f"üìã Sess√£o Ativa: {session_id}")
            print(f"üìà Status: {status}")
            print(f"ü§ù Colabora√ß√µes: {stats}")
        else:
            print("‚ÑπÔ∏è Nenhuma sess√£o ativa")
    
    async def shutdown(self):
        """Encerra o sistema"""
        print("\nüîö Encerrando sistema CWB Hub...")
        await self.orchestrator.shutdown()
        print("‚úÖ Sistema encerrado com sucesso!")

async def exemplo_uso_completo():
    """Exemplo completo de como usar o CWB Hub no projeto"""
    
    # Verificar se CWB Hub est√° dispon√≠vel
    if not CWB_HUB_AVAILABLE:
        print("‚ùå CWB Hub n√£o est√° dispon√≠vel")
        print("Certifique-se de que voc√™ est√° na pasta correta e o CWB Hub est√° instalado")
        return
    
    # Plano de neg√≥cio do restaurante
    plano_negocio = """
    SISTEMA DE GEST√ÉO DE RESTAURANTE
    Criado por: David Simer
    
    CONTEXTO:
    Sou dono de um restaurante familiar e preciso automatizar os processos
    para melhorar a efici√™ncia e reduzir erros.
    
    SITUA√á√ÉO ATUAL:
    - 15 mesas, 5 gar√ßons
    - Comandas em papel (muitos erros)
    - Controle de estoque manual
    - Relat√≥rios financeiros b√°sicos
    - Sem sistema de delivery organizado
    
    OBJETIVOS:
    1. Automatizar controle de pedidos
    2. Melhorar comunica√ß√£o sal√£o-cozinha
    3. Controlar estoque automaticamente
    4. Gerar relat√≥rios financeiros
    5. Ter app simples para gar√ßons
    6. Organizar sistema de delivery
    
    FUNCIONALIDADES DESEJADAS:
    
    üìã CONTROLE DE PEDIDOS:
    - Comandas digitais por mesa
    - Status dos pedidos em tempo real
    - Hist√≥rico de pedidos por cliente
    - Integra√ß√£o com sistema de pagamento
    
    üì¶ GEST√ÉO DE ESTOQUE:
    - Cadastro de ingredientes
    - Controle de entrada/sa√≠da
    - Alertas de estoque baixo
    - Relat√≥rios de consumo
    
    üí∞ CONTROLE FINANCEIRO:
    - Vendas di√°rias/mensais
    - Relat√≥rios de lucro
    - Controle de despesas
    - An√°lise de performance
    
    üì± APP PARA GAR√áONS:
    - Interface simples e intuitiva
    - Anotar pedidos rapidamente
    - Ver status das mesas
    - Comunicar com cozinha
    
    üçΩÔ∏è CARD√ÅPIO DIGITAL:
    - Para clientes consultarem
    - F√°cil atualiza√ß√£o
    - Fotos dos pratos
    - Pre√ßos atualizados
    
    üöö SISTEMA DE DELIVERY:
    - Integra√ß√£o WhatsApp
    - Controle de entregas
    - C√°lculo de taxas
    - Rastreamento
    
    REQUISITOS T√âCNICOS:
    - Sistema web (funciona em tablet/celular)
    - App mobile para gar√ßons
    - Banco de dados confi√°vel
    - Backup autom√°tico
    - Interface muito simples (equipe n√£o √© t√©cnica)
    - Funciona offline b√°sico
    
    CRONOGRAMA:
    - MVP: 2-3 meses
    - Vers√£o completa: 4-5 meses
    - Testes e ajustes: 1 m√™s
    
    OR√áAMENTO:
    - Moderado
    - Prefer√™ncia por tecnologias gratuitas
    - Foco no essencial primeiro
    - Expans√£o gradual
    """
    
    # Inicializar gerenciador
    manager = RestaurantProjectManager()
    
    try:
        # 1. Inicializar equipe
        await manager.initialize_team()
        
        # 2. Analisar plano de neg√≥cio
        response = await manager.analyze_business_plan(plano_negocio)
        
        # 3. Simular feedback do usu√°rio
        feedback = """
        Excelente an√°lise! Algumas considera√ß√µes importantes:
        
        PRIORIDADES:
        1. Controle de pedidos √© URGENTE - maior problema atual
        2. App para gar√ßons √© essencial
        3. Relat√≥rios b√°sicos de vendas
        
        OR√áAMENTO:
        - Limitado, vamos come√ßar com MVP
        - Tecnologias simples e baratas
        - Foco no que resolve problemas imediatos
        
        EQUIPE:
        - N√£o √© t√©cnica, interface precisa ser MUITO simples
        - Treinamento m√≠nimo
        - Resist√™ncia a mudan√ßas
        
        CRONOGRAMA:
        - 2 meses para MVP est√° bom
        - Preciso testar com equipe real
        - Implementa√ß√£o gradual
        
        ESPEC√çFICO:
        - WhatsApp delivery √© prioridade
        - Backup autom√°tico √© essencial
        - Funcionar em tablets baratos
        
        Podem ajustar a proposta focando nessas prioridades?
        """
        
        # 4. Refinar solu√ß√£o
        await manager.refine_solution(feedback)
        
        # 5. Status do projeto
        await manager.get_project_status()
        
        print("\nüéâ EXEMPLO CONCLU√çDO COM SUCESSO!")
        print("=" * 60)
        print("‚úÖ Plano de neg√≥cio analisado pela equipe completa")
        print("‚úÖ Solu√ß√£o t√©cnica fornecida")
        print("‚úÖ Refinamento baseado em feedback")
        print("‚úÖ Projeto pronto para desenvolvimento!")
        
    except Exception as e:
        print(f"‚ùå Erro durante execu√ß√£o: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # 6. Encerrar sistema
        await manager.shutdown()

def main():
    """Fun√ß√£o principal"""
    print("üéØ CWB HUB CLIENT - GEST√ÉO DE RESTAURANTE")
    print("üë®‚Äçüíª Criado por: David Simer")
    print()
    print("üìã Este script demonstra como usar o CWB Hub no seu projeto")
    print("üîß Resolve problemas de importa√ß√£o e fornece exemplo pr√°tico")
    print()
    
    if not CWB_HUB_AVAILABLE:
        print("‚ùå CWB Hub n√£o dispon√≠vel")
        print("Verifique se voc√™ est√° na pasta correta")
        return
    
    try:
        asyncio.run(exemplo_uso_completo())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Execu√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        print(f"\nüí• Erro fatal: {e}")

if __name__ == "__main__":
    main()