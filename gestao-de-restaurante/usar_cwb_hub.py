#!/usr/bin/env python3
"""
Script para usar o CWB Hub Hybrid AI System no projeto de Gest√£o de Restaurante
Criado por: David Simer
"""

import sys
import os
import asyncio

# Adicionar o caminho do CWB Hub ao Python path
cwb_hub_path = os.path.join(os.path.dirname(__file__), '..', 'src')
sys.path.insert(0, cwb_hub_path)

from core.hybrid_ai_orchestrator import HybridAIOrchestrator

class RestaurantProjectManager:
    """Gerenciador do projeto usando CWB Hub"""
    
    def __init__(self):
        self.orchestrator = HybridAIOrchestrator()
        self.project_name = "Sistema de Gest√£o de Restaurante"
        
    async def initialize_team(self):
        """Inicializa a equipe CWB Hub"""
        print("üöÄ Inicializando Equipe CWB Hub para o projeto...")
        print(f"üìã Projeto: {self.project_name}")
        print("=" * 60)
        
        await self.orchestrator.initialize_agents()
        
        agents = self.orchestrator.get_active_agents()
        print(f"‚úÖ Equipe inicializada com {len(agents)} profissionais:")
        
        for agent_id in agents:
            agent = self.orchestrator.agents[agent_id]
            print(f"   üë§ {agent.profile.name} - {agent.profile.role}")
        
        print("=" * 60)
        return True
    
    async def process_business_plan(self, business_plan):
        """Processa o plano de neg√≥cio com a equipe"""
        print("\nüéØ PROCESSANDO PLANO DE NEG√ìCIO")
        print("=" * 60)
        
        # Criar solicita√ß√£o estruturada
        request = f"""
        PROJETO: {self.project_name}
        
        PLANO DE NEG√ìCIO:
        {business_plan}
        
        SOLICITA√á√ÉO PARA A EQUIPE CWB HUB:
        Com base neste plano de neg√≥cio, preciso que voc√™s:
        
        1. ANALISEM o projeto sob suas perspectivas profissionais
        2. COLABOREM para identificar requisitos t√©cnicos e funcionais
        3. PROPONHAM uma solu√ß√£o completa de desenvolvimento
        4. COMUNIQUEM um plano de implementa√ß√£o detalhado
        5. PREPAREM para itera√ß√µes baseadas em feedback
        
        Quero uma an√°lise completa que cubra:
        - Arquitetura do sistema
        - Tecnologias recomendadas
        - Design da interface
        - Funcionalidades principais
        - Plano de desenvolvimento
        - Estrat√©gia de testes
        - Infraestrutura e deploy
        - Cronograma e gest√£o
        """
        
        print("üì§ Enviando para a equipe CWB Hub...")
        response = await self.orchestrator.process_request(request.strip())
        
        print("\nüì• RESPOSTA DA EQUIPE CWB HUB:")
        print("=" * 60)
        print(response)
        
        return response
    
    async def iterate_solution(self, feedback):
        """Itera a solu√ß√£o com feedback"""
        print("\nüîÑ ITERANDO SOLU√á√ÉO COM FEEDBACK")
        print("=" * 60)
        print(f"Feedback: {feedback}")
        
        # Obter sess√£o ativa
        sessions = list(self.orchestrator.active_sessions.keys())
        if sessions:
            session_id = sessions[0]
            refined_response = await self.orchestrator.iterate_solution(session_id, feedback)
            
            print("\nüì• SOLU√á√ÉO REFINADA:")
            print("=" * 60)
            print(refined_response)
            
            return refined_response
        else:
            print("‚ùå Nenhuma sess√£o ativa encontrada")
            return None
    
    async def get_project_status(self):
        """Obt√©m status do projeto"""
        sessions = list(self.orchestrator.active_sessions.keys())
        if sessions:
            status = self.orchestrator.get_session_status(sessions[0])
            stats = self.orchestrator.collaboration_framework.get_collaboration_stats()
            
            print("\nüìä STATUS DO PROJETO:")
            print("=" * 60)
            print(f"Status da Sess√£o: {status}")
            print(f"Estat√≠sticas: {stats}")
        
    async def shutdown(self):
        """Encerra o sistema"""
        print("\nüîö Encerrando sistema CWB Hub...")
        await self.orchestrator.shutdown()
        print("‚úÖ Sistema encerrado com sucesso!")

async def main():
    """Fun√ß√£o principal - exemplo de uso"""
    
    # Exemplo de plano de neg√≥cio
    business_plan = """
    PLANO DE NEG√ìCIO - SISTEMA DE GEST√ÉO DE RESTAURANTE
    
    VIS√ÉO GERAL:
    Desenvolver um sistema completo para gest√£o de restaurantes que permita:
    - Controle de pedidos e comandas
    - Gest√£o de estoque e ingredientes
    - Controle financeiro e relat√≥rios
    - Gest√£o de funcion√°rios e turnos
    - Interface para clientes (card√°pio digital)
    - Sistema de delivery integrado
    
    P√öBLICO-ALVO:
    - Restaurantes pequenos e m√©dios
    - Lanchonetes e fast-foods
    - Bares e cafeterias
    
    OBJETIVOS:
    - Automatizar processos manuais
    - Reduzir erros em pedidos
    - Melhorar controle de estoque
    - Aumentar eficiÔøΩÔøΩncia operacional
    - Fornecer insights atrav√©s de relat√≥rios
    
    REQUISITOS T√âCNICOS INICIAIS:
    - Sistema web responsivo
    - App mobile para gar√ßons
    - Integra√ß√£o com sistemas de pagamento
    - Relat√≥rios em tempo real
    - Backup autom√°tico de dados
    - Suporte a m√∫ltiplos restaurantes
    
    CRONOGRAMA DESEJADO:
    - MVP em 3 meses
    - Vers√£o completa em 6 meses
    
    OR√áAMENTO:
    - Or√ßamento moderado
    - Foco em tecnologias open-source
    - Priorizar funcionalidades essenciais
    """
    
    # Inicializar gerenciador do projeto
    manager = RestaurantProjectManager()
    
    try:
        # 1. Inicializar equipe
        await manager.initialize_team()
        
        # 2. Processar plano de neg√≥cio
        response = await manager.process_business_plan(business_plan)
        
        # 3. Exemplo de itera√ß√£o com feedback
        feedback = """
        Gostei muito da proposta! Algumas considera√ß√µes:
        - Preciso priorizar o controle de pedidos primeiro
        - O app mobile √© essencial para os gar√ßons
        - Integra√ß√£o com WhatsApp para delivery seria √≥timo
        - Relat√≥rios simples mas eficazes
        - Foco em usabilidade - equipe n√£o √© muito t√©cnica
        """
        
        await manager.iterate_solution(feedback)
        
        # 4. Status do projeto
        await manager.get_project_status()
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
    
    finally:
        # 5. Encerrar sistema
        await manager.shutdown()

if __name__ == "__main__":
    print("üè¢ CWB HUB HYBRID AI SYSTEM")
    print("üìã Projeto: Sistema de Gest√£o de Restaurante")
    print("üë®‚Äçüíª Criado por: David Simer")
    print("=" * 60)
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Execu√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        print(f"\nüí• Erro fatal: {e}")