#!/usr/bin/env python3
"""
DEMONSTRA√á√ÉO: Como usar CWB Hub para projeto de Gest√£o de Restaurante
Criado por: David Simer
"""

import asyncio
import sys
import os

# Configurar caminho para importar CWB Hub
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
src_dir = os.path.join(parent_dir, 'src')
sys.path.insert(0, src_dir)

# Importar componentes do CWB Hub
try:
    from core.hybrid_ai_orchestrator import HybridAIOrchestrator
except ImportError as e:
    print(f"‚ùå Erro ao importar CWB Hub: {e}")
    print("Certifique-se de que o CWB Hub est√° na pasta pai")
    sys.exit(1)

async def demonstrar_uso_cwb_hub():
    """Demonstra como usar o CWB Hub para o projeto de restaurante"""
    
    print("üè¢ CWB HUB HYBRID AI SYSTEM")
    print("üë®‚Äçüíª Criado por: David Simer")
    print("üìã Projeto: Sistema de Gest√£o de Restaurante")
    print("=" * 60)
    
    # Plano de neg√≥cio do restaurante
    plano_negocio = """
    PROJETO: Sistema de Gest√£o de Restaurante
    CRIADO POR: David Simer
    
    VIS√ÉO GERAL:
    Desenvolver um sistema completo para automatizar a gest√£o do meu restaurante,
    desde o atendimento ao cliente at√© o controle financeiro.
    
    FUNCIONALIDADES DESEJADAS:
    
    1. CONTROLE DE PEDIDOS
       - Sistema de comandas digitais
       - Acompanhamento de status dos pedidos
       - Comunica√ß√£o entre sal√£o e cozinha
       - Hist√≥rico de pedidos por cliente
    
    2. GEST√ÉO DE ESTOQUE
       - Controle de ingredientes e produtos
       - Alertas de estoque baixo
       - Relat√≥rios de consumo
       - Integra√ß√£o com fornecedores
    
    3. CONTROLE FINANCEIRO
       - Registro de vendas di√°rias
       - Relat√≥rios de lucro e despesas
       - Controle de fluxo de caixa
       - An√°lise de performance por per√≠odo
    
    4. APP MOBILE PARA GAR√áONS
       - Interface simples para anotar pedidos
       - Visualiza√ß√£o do status das mesas
       - Comunica√ß√£o direta com a cozinha
       - Funcionalidade offline b√°sica
    
    5. CARD√ÅPIO DIGITAL
       - Interface para clientes
       - F√°cil atualiza√ß√£o de pratos e pre√ßos
       - Fotos dos pratos
       - Categoriza√ß√£o por tipo de comida
    
    6. SISTEMA DE DELIVERY
       - Integra√ß√£o com WhatsApp
       - Controle de entregas
       - C√°lculo de taxa de entrega
       - Rastreamento de pedidos
    
    REQUISITOS T√âCNICOS:
    - Sistema web responsivo (funciona em tablet/celular)
    - App mobile simples para gar√ßons
    - Banco de dados confi√°vel
    - Backup autom√°tico
    - Relat√≥rios em PDF
    - Interface intuitiva (equipe n√£o √© t√©cnica)
    
    CRONOGRAMA:
    - MVP (funcionalidades b√°sicas): 2-3 meses
    - Vers√£o completa: 4-5 meses
    - Testes e ajustes: 1 m√™s
    
    OR√áAMENTO:
    - Or√ßamento moderado
    - Prefer√™ncia por tecnologias gratuitas/open-source
    - Foco nas funcionalidades essenciais primeiro
    - Possibilidade de expans√£o futura
    
    CONTEXTO DO NEG√ìCIO:
    - Restaurante familiar de m√©dio porte
    - 15 mesas, 5 gar√ßons
    - Card√°pio variado (pratos executivos, √† la carte)
    - Delivery pr√≥prio
    - Clientela fiel e crescente movimento
    """
    
    # Inicializar CWB Hub
    orchestrator = HybridAIOrchestrator()
    
    try:
        print("\nüöÄ INICIALIZANDO EQUIPE CWB HUB...")
        await orchestrator.initialize_agents()
        
        agents = orchestrator.get_active_agents()
        print(f"‚úÖ Equipe inicializada com {len(agents)} profissionais:")
        
        for agent_id in agents:
            agent = orchestrator.agents[agent_id]
            print(f"   üë§ {agent.profile.name} - {agent.profile.role}")
        
        print("\n" + "="*60)
        print("üì§ ENVIANDO PLANO DE NEG√ìCIO PARA A EQUIPE...")
        print("="*60)
        
        # Processar plano de neg√≥cio
        response = await orchestrator.process_request(plano_negocio)
        
        print("\nüì• RESPOSTA DA EQUIPE CWB HUB:")
        print("="*60)
        print(response)
        
        # Simular feedback do usu√°rio
        print("\n" + "="*60)
        print("üí¨ SIMULANDO FEEDBACK DO USU√ÅRIO...")
        print("="*60)
        
        feedback = """
        Excelente an√°lise da equipe! Tenho algumas considera√ß√µes:
        
        1. PRIORIDADES: Preciso focar primeiro no controle de pedidos e no app para gar√ßons.
           Isso vai resolver meu maior problema atual.
        
        2. OR√áAMENTO: √â limitado, ent√£o vamos come√ßar com o MVP e expandir depois.
        
        3. TECNOLOGIA: Gostei da sugest√£o de tecnologias web. Precisa ser simples de manter.
        
        4. CRONOGRAMA: 2-3 meses para o MVP est√° perfeito. Posso testar com a equipe.
        
        5. INTEGRA√á√ÉO: A integra√ß√£o com WhatsApp para delivery √© essencial.
        
        6. USABILIDADE: A equipe n√£o √© t√©cnica, ent√£o a interface precisa ser muito intuitiva.
        
        Podem refinar a proposta focando nessas prioridades?
        """
        
        print(f"Feedback: {feedback}")
        
        # Obter sess√£o ativa para itera√ß√£o
        sessions = list(orchestrator.active_sessions.keys())
        if sessions:
            session_id = sessions[0]
            
            print("\nüîÑ REFINANDO SOLU√á√ÉO COM BASE NO FEEDBACK...")
            refined_response = await orchestrator.iterate_solution(session_id, feedback)
            
            print("\nüì• SOLU√á√ÉO REFINADA:")
            print("="*60)
            print(refined_response)
            
            # Mostrar estat√≠sticas
            print("\nüìä ESTAT√çSTICAS DA SESS√ÉO:")
            print("="*60)
            status = orchestrator.get_session_status(session_id)
            stats = orchestrator.collaboration_framework.get_collaboration_stats()
            print(f"Status: {status}")
            print(f"Colabora√ß√µes: {stats}")
        
        print("\nüéâ DEMONSTRA√á√ÉO CONCLU√çDA!")
        print("="*60)
        print("‚úÖ A equipe CWB Hub analisou seu plano de neg√≥cio")
        print("‚úÖ Forneceu uma solu√ß√£o t√©cnica completa")
        print("‚úÖ Refinou a proposta com base no seu feedback")
        print("‚úÖ Est√° pronta para come√ßar o desenvolvimento!")
        
    except Exception as e:
        print(f"‚ùå Erro durante execu√ß√£o: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        print("\nüîö Encerrando sistema...")
        await orchestrator.shutdown()
        print("‚úÖ Sistema encerrado com sucesso!")

def main():
    """Fun√ß√£o principal"""
    print("üéØ DEMONSTRA√á√ÉO: Como usar CWB Hub no seu projeto")
    print("üìã Cen√°rio: Voc√™ est√° na pasta 'gestao-de-restaurante' no VSCode")
    print("üí° Voc√™ tem um plano de neg√≥cio e quer que a equipe CWB Hub analise")
    print()
    
    try:
        asyncio.run(demonstrar_uso_cwb_hub())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Demonstra√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        print(f"\nüí• Erro fatal: {e}")

if __name__ == "__main__":
    main()