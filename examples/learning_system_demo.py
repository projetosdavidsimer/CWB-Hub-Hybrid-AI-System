"""
Demonstra√ß√£o do Sistema de Aprendizado Cont√≠nuo CWB Hub
Melhoria #7 - Exemplo pr√°tico de uso

Este exemplo demonstra como usar o sistema de aprendizado cont√≠nuo
para melhorar continuamente a performance dos agentes CWB Hub.

Funcionalidades demonstradas:
1. Inicializa√ß√£o do sistema
2. Processamento de feedback
3. An√°lise de padr√µes
4. Adapta√ß√£o de agentes
5. Insights de aprendizado

Criado por: David Simer
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta
import json

# Adicionar src ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from learning import (
    learning_system,
    pattern_analyzer,
    feedback_processor,
    learning_integration,
    FeedbackType,
    LearningEventType
)

from core.hybrid_ai_orchestrator import HybridAIOrchestrator


class LearningSystemDemo:
    """Demonstra√ß√£o do Sistema de Aprendizado Cont√≠nuo"""
    
    def __init__(self):
        self.orchestrator = None
        self.demo_data = {
            "sessions": [],
            "feedback_samples": [
                {
                    "text": "Excelente resposta da Ana! Muito clara e √∫til.",
                    "rating": 5,
                    "agent": "ana_beatriz_costa"
                },
                {
                    "text": "Carlos foi muito t√©cnico, mas poderia ser mais claro.",
                    "rating": 3,
                    "agent": "carlos_eduardo_santos"
                },
                {
                    "text": "Sofia deu uma solu√ß√£o perfeita para o problema web!",
                    "rating": 5,
                    "agent": "sofia_oliveira"
                },
                {
                    "text": "A colabora√ß√£o entre os agentes foi confusa.",
                    "rating": 2,
                    "agent": None
                },
                {
                    "text": "Gabriel ajudou muito com o desenvolvimento mobile.",
                    "rating": 4,
                    "agent": "gabriel_mendes"
                },
                {
                    "text": "Isabella criou um design incr√≠vel! Muito criativa.",
                    "rating": 5,
                    "agent": "isabella_santos"
                },
                {
                    "text": "Lucas encontrou v√°rios bugs importantes. Bom trabalho!",
                    "rating": 4,
                    "agent": "lucas_pereira"
                },
                {
                    "text": "Mariana configurou tudo perfeitamente. DevOps excelente!",
                    "rating": 5,
                    "agent": "mariana_rodrigues"
                },
                {
                    "text": "Pedro organizou bem o projeto, mas poderia ser mais √°gil.",
                    "rating": 3,
                    "agent": "pedro_henrique_almeida"
                },
                {
                    "text": "A equipe trabalhou bem juntos neste projeto!",
                    "rating": 4,
                    "agent": None
                }
            ]
        }
    
    async def initialize_system(self):
        """Inicializa o sistema CWB Hub com aprendizado"""
        print("üöÄ Inicializando Sistema CWB Hub com Aprendizado Cont√≠nuo...")
        
        # Inicializar orquestrador
        self.orchestrator = HybridAIOrchestrator()
        await self.orchestrator.initialize_agents()
        
        # Inicializar integra√ß√£o de aprendizado
        await learning_integration.initialize(self.orchestrator)
        
        print("‚úÖ Sistema inicializado com sucesso!")
        print(f"üìä Agentes ativos: {len(self.orchestrator.agents)}")
        print(f"üß† Sistema de aprendizado: {'Ativo' if learning_integration.is_active else 'Inativo'}")
    
    async def simulate_user_sessions(self):
        """Simula sess√µes de usu√°rio para gerar dados"""
        print("\nüé≠ Simulando sess√µes de usu√°rio...")
        
        sample_requests = [
            "Como criar um app mobile para e-commerce?",
            "Preciso de uma arquitetura web escal√°vel",
            "Como implementar testes automatizados?",
            "Qual a melhor estrat√©gia de DevOps?",
            "Como criar uma interface de usu√°rio moderna?",
            "Preciso de ajuda com gerenciamento de projeto √°gil",
            "Como otimizar performance de banco de dados?",
            "Qual framework usar para desenvolvimento full-stack?"
        ]
        
        for i, request in enumerate(sample_requests):
            print(f"  üìù Processando requisi√ß√£o {i+1}: {request[:50]}...")
            
            try:
                # Processar requisi√ß√£o
                response = await self.orchestrator.process_request(request)
                
                # Simular delay realista
                await asyncio.sleep(0.5)
                
                print(f"  ‚úÖ Resposta gerada ({len(response)} caracteres)")
                
            except Exception as e:
                print(f"  ‚ùå Erro na requisi√ß√£o {i+1}: {e}")
        
        print(f"‚úÖ {len(sample_requests)} sess√µes simuladas!")
    
    async def process_feedback_samples(self):
        """Processa amostras de feedback"""
        print("\nüí¨ Processando feedback dos usu√°rios...")
        
        for i, feedback_sample in enumerate(self.demo_data["feedback_samples"]):
            print(f"  üìù Processando feedback {i+1}: {feedback_sample['text'][:40]}...")
            
            try:
                # Processar feedback atrav√©s da integra√ß√£o
                result = await learning_integration.process_user_feedback(
                    feedback_text=feedback_sample["text"],
                    session_id=f"demo_session_{i}",
                    user_id=f"demo_user_{i % 3}",  # 3 usu√°rios diferentes
                    rating=feedback_sample["rating"]
                )
                
                sentiment = result["processed_feedback"]["sentiment"]
                priority = result["processed_feedback"]["priority"]
                
                print(f"  ‚úÖ Feedback processado - Sentimento: {sentiment}, Prioridade: {priority}")
                
            except Exception as e:
                print(f"  ‚ùå Erro no feedback {i+1}: {e}")
        
        print(f"‚úÖ {len(self.demo_data['feedback_samples'])} feedbacks processados!")
    
    async def demonstrate_pattern_analysis(self):
        """Demonstra an√°lise de padr√µes"""
        print("\nüîç Analisando padr√µes de uso...")
        
        try:
            # Obter sess√µes ativas para an√°lise
            sessions = list(self.orchestrator.active_sessions.values())
            
            if not sessions:
                print("  ‚ö†Ô∏è Nenhuma sess√£o ativa encontrada para an√°lise")
                return
            
            # Analisar padr√µes
            analysis_result = await pattern_analyzer.analyze_session_patterns(sessions)
            
            print(f"  üìä An√°lise conclu√≠da:")
            print(f"    ‚Ä¢ Padr√µes encontrados: {len(analysis_result.patterns_found)}")
            print(f"    ‚Ä¢ Confian√ßa m√©dia: {analysis_result.confidence_score:.2f}")
            print(f"    ‚Ä¢ Qualidade dos dados: {analysis_result.data_quality:.2f}")
            
            # Mostrar insights
            if analysis_result.insights:
                print(f"  üí° Insights principais:")
                for insight in analysis_result.insights[:3]:
                    print(f"    ‚Ä¢ {insight}")
            
            # Mostrar recomenda√ß√µes
            if analysis_result.recommendations:
                print(f"  üéØ Recomenda√ß√µes:")
                for rec in analysis_result.recommendations[:3]:
                    print(f"    ‚Ä¢ {rec}")
            
        except Exception as e:
            print(f"  ‚ùå Erro na an√°lise de padr√µes: {e}")
    
    async def demonstrate_agent_adaptation(self):
        """Demonstra adapta√ß√£o de agentes"""
        print("\nüîÑ Demonstrando adapta√ß√£o de agentes...")
        
        try:
            # Obter insights de um agente espec√≠fico
            agent_id = "ana_beatriz_costa"
            insights = await learning_integration.get_learning_insights(agent_id)
            
            print(f"  üìä Insights do agente {agent_id}:")
            metrics = insights.get("current_metrics", {})
            print(f"    ‚Ä¢ Performance: {metrics.get('performance_score', 0):.2f}")
            print(f"    ‚Ä¢ Feedback Score: {metrics.get('feedback_score', 0):.2f}")
            print(f"    ‚Ä¢ Colabora√ß√£o: {metrics.get('collaboration_effectiveness', 0):.2f}")
            
            # Aplicar adapta√ß√£o manual
            adaptation_result = await learning_integration.trigger_manual_adaptation(
                agent_id=agent_id,
                adaptation_type="performance_improvement",
                parameters={
                    "communication_style": "more_detailed",
                    "collaboration_style": "enhanced_synergy"
                }
            )
            
            if adaptation_result.get("success"):
                print(f"  ‚úÖ Adapta√ß√£o aplicada com sucesso para {agent_id}")
            else:
                print(f"  ‚ùå Falha na adapta√ß√£o para {agent_id}")
            
        except Exception as e:
            print(f"  ‚ùå Erro na adapta√ß√£o: {e}")
    
    async def show_learning_analytics(self):
        """Mostra analytics de aprendizado"""
        print("\nüìà Analytics de Aprendizado...")
        
        try:
            # Analytics de feedback
            feedback_analytics = await learning_integration.get_feedback_analytics(7)
            
            summary = feedback_analytics.get("summary", {})
            if summary and "total_feedback" in summary:
                print(f"  üìä Resumo de Feedback (7 dias):")
                print(f"    ‚Ä¢ Total de feedbacks: {summary['total_feedback']}")
                
                metrics = summary.get("metrics", {})
                if metrics:
                    print(f"    ‚Ä¢ Sentimento m√©dio: {metrics.get('avg_sentiment', 0):.2f}")
                    print(f"    ‚Ä¢ Rating m√©dio: {metrics.get('avg_rating', 0):.1f}/5")
                    print(f"    ‚Ä¢ Taxa positiva: {metrics.get('positive_ratio', 0):.1%}")
                
                # Distribui√ß√µes
                distributions = summary.get("distributions", {})
                if distributions.get("sentiment"):
                    print(f"    ‚Ä¢ Distribui√ß√£o de sentimento:")
                    for sentiment, count in distributions["sentiment"].items():
                        print(f"      - {sentiment}: {count}")
            
            # Tend√™ncias
            trends = feedback_analytics.get("trends", [])
            if trends:
                print(f"  üìà Tend√™ncias identificadas:")
                for trend in trends[:3]:
                    direction_emoji = "üìà" if trend["direction"] == "improving" else "üìâ" if trend["direction"] == "declining" else "‚û°Ô∏è"
                    print(f"    {direction_emoji} {trend['type']}: {trend['direction']} (valor atual: {trend['current_value']:.2f})")
            
            # Insights
            insights = feedback_analytics.get("insights", [])
            if insights:
                print(f"  üí° Insights de aprendizado:")
                for insight in insights[:3]:
                    print(f"    ‚Ä¢ {insight['description']}")
            
        except Exception as e:
            print(f"  ‚ùå Erro ao obter analytics: {e}")
    
    async def demonstrate_export_import(self):
        """Demonstra exporta√ß√£o e importa√ß√£o de dados"""
        print("\nüíæ Demonstrando exporta√ß√£o de dados de aprendizado...")
        
        try:
            # Exportar dados
            exported_data = await learning_integration.export_learning_data("json")
            
            # Salvar em arquivo
            filename = f"learning_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(exported_data)
            
            print(f"  ‚úÖ Dados exportados para: {filename}")
            
            # Mostrar estat√≠sticas do export
            data = json.loads(exported_data)
            print(f"  üìä Estat√≠sticas do export:")
            print(f"    ‚Ä¢ Timestamp: {data.get('export_timestamp', 'N/A')}")
            
            system_status = data.get("system_status", {})
            if system_status:
                learning_metrics = system_status.get("learning_metrics", {})
                print(f"    ‚Ä¢ Total de eventos: {learning_metrics.get('total_events', 0)}")
                print(f"    ‚Ä¢ Total de feedback: {learning_metrics.get('total_feedback', 0)}")
                print(f"    ‚Ä¢ Agentes monitorados: {learning_metrics.get('agents_count', 0)}")
            
        except Exception as e:
            print(f"  ‚ùå Erro na exporta√ß√£o: {e}")
    
    async def run_complete_demo(self):
        """Executa demonstra√ß√£o completa"""
        print("üéØ DEMONSTRA√á√ÉO COMPLETA DO SISTEMA DE APRENDIZADO CONT√çNUO CWB HUB")
        print("=" * 70)
        
        try:
            # 1. Inicializar sistema
            await self.initialize_system()
            
            # 2. Simular sess√µes
            await self.simulate_user_sessions()
            
            # 3. Processar feedback
            await self.process_feedback_samples()
            
            # 4. Analisar padr√µes
            await self.demonstrate_pattern_analysis()
            
            # 5. Adaptar agentes
            await self.demonstrate_agent_adaptation()
            
            # 6. Mostrar analytics
            await self.show_learning_analytics()
            
            # 7. Exportar dados
            await self.demonstrate_export_import()
            
            print("\nüéâ DEMONSTRA√á√ÉO CONCLU√çDA COM SUCESSO!")
            print("=" * 70)
            print("‚úÖ Todas as funcionalidades do sistema de aprendizado foram demonstradas")
            print("üß† O sistema est√° continuamente aprendendo e melhorando")
            print("üìà Os agentes CWB Hub est√£o evoluindo baseado no feedback e padr√µes")
            
        except Exception as e:
            print(f"\n‚ùå ERRO NA DEMONSTRA√á√ÉO: {e}")
            import traceback
            traceback.print_exc()
        
        finally:
            # Cleanup
            if learning_integration.is_active:
                await learning_integration.shutdown()
            
            if self.orchestrator:
                await self.orchestrator.shutdown()


async def main():
    """Fun√ß√£o principal"""
    demo = LearningSystemDemo()
    await demo.run_complete_demo()


if __name__ == "__main__":
    # Executar demonstra√ß√£o
    print("üöÄ Iniciando demonstra√ß√£o do Sistema de Aprendizado Cont√≠nuo...")
    asyncio.run(main())